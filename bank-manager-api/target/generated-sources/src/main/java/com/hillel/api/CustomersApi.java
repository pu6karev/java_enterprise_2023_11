/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.hillel.api;

import com.hillel.model.Customer;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-12-29T23:11:17.851421400+02:00[Europe/Kiev]")
@Validated
@Tag(name = "customers", description = "Operations with customers")
public interface CustomersApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /customers
     *
     * @param customer Customer object to be created (required)
     * @return New client created (status code 201)
     */
    @Operation(
        operationId = "createCustomer",
        tags = { "customers" },
        responses = {
            @ApiResponse(responseCode = "201", description = "New client created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Customer.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/customers",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Customer> createCustomer(
        @Parameter(name = "Customer", description = "Customer object to be created", required = true) @Valid @RequestBody Customer customer
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"customerId\" : 0, \"name\" : \"name\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /customers/{customerId}
     *
     * @param customerId Client ID (required)
     * @return Individual client information (status code 200)
     */
    @Operation(
        operationId = "getCustomer",
        tags = { "customers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Individual client information", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Customer.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/customers/{customerId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Customer> getCustomer(
        @Parameter(name = "customerId", description = "Client ID", required = true, in = ParameterIn.PATH) @PathVariable("customerId") Integer customerId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"customerId\" : 0, \"name\" : \"name\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /customers
     *
     * @param cacheControl Cache time (optional)
     * @param limit Number of entries per page (optional)
     * @return List of all clients (status code 200)
     */
    @Operation(
        operationId = "getCustomers",
        tags = { "customers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of all clients", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Customer.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/customers",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Customer>> getCustomers(
        @Parameter(name = "Cache-Control", description = "Cache time", in = ParameterIn.HEADER) @RequestHeader(value = "Cache-Control", required = false) String cacheControl,
        @Parameter(name = "limit", description = "Number of entries per page", in = ParameterIn.QUERY) @Valid @RequestParam(value = "limit", required = false) Integer limit
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"customerId\" : 0, \"name\" : \"name\", \"email\" : \"email\" }, { \"customerId\" : 0, \"name\" : \"name\", \"email\" : \"email\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /customers/{customerId}
     *
     * @param customerId Client ID (required)
     * @param customer  (optional)
     * @return Client updated (status code 200)
     */
    @Operation(
        operationId = "updateCustomer",
        tags = { "customers" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Client updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Customer.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/customers/{customerId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Customer> updateCustomer(
        @Parameter(name = "customerId", description = "Client ID", required = true, in = ParameterIn.PATH) @PathVariable("customerId") Integer customerId,
        @Parameter(name = "Customer", description = "") @Valid @RequestBody(required = false) Customer customer
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"customerId\" : 0, \"name\" : \"name\", \"email\" : \"email\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
