/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.hillel.api;

import com.hillel.model.Account;
import com.hillel.model.NotifyBalanceChange;
import io.swagger.v3.oas.annotations.ExternalDocumentation;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.Parameters;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import io.swagger.v3.oas.annotations.tags.Tag;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-12-29T23:11:17.851421400+02:00[Europe/Kiev]")
@Validated
@Tag(name = "accounts", description = "Operations with accounts")
public interface AccountsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /customers/{id}/accounts
     *
     * @param id Customer ID (required)
     * @param account Account object to be created (required)
     * @return New account created (status code 201)
     */
    @Operation(
        operationId = "createAccount",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "201", description = "New account created", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Account.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/customers/{id}/accounts",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Account> createAccount(
        @Parameter(name = "id", description = "Customer ID", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id,
        @Parameter(name = "Account", description = "Account object to be created", required = true) @Valid @RequestBody Account account
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountId\" : 0, \"balance\" : 6, \"iban\" : \"iban\", \"customerId\" : 1, \"currency\" : \"currency\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /accounts/{accountId}
     *
     * @param accountId Account ID (required)
     * @return Account deleted successfully (status code 204)
     */
    @Operation(
        operationId = "deleteAccount",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "204", description = "Account deleted successfully")
        }
    )
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/accounts/{accountId}"
    )
    
    default ResponseEntity<Void> deleteAccount(
        @Parameter(name = "accountId", description = "Account ID", required = true, in = ParameterIn.PATH) @PathVariable("accountId") Integer accountId
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /accounts/{accountId}
     *
     * @param accountId Account ID (required)
     * @return Individual account information (status code 200)
     */
    @Operation(
        operationId = "getAccount",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Individual account information", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Account.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/accounts/{accountId}",
        produces = { "application/json" }
    )
    
    default ResponseEntity<Account> getAccount(
        @Parameter(name = "accountId", description = "Account ID", required = true, in = ParameterIn.PATH) @PathVariable("accountId") Integer accountId
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountId\" : 0, \"balance\" : 6, \"iban\" : \"iban\", \"customerId\" : 1, \"currency\" : \"currency\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /accounts
     *
     * @return List of all accounts (status code 200)
     */
    @Operation(
        operationId = "getAccounts",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of all accounts", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Account.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/accounts",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Account>> getAccounts(
        
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"accountId\" : 0, \"balance\" : 6, \"iban\" : \"iban\", \"customerId\" : 1, \"currency\" : \"currency\" }, { \"accountId\" : 0, \"balance\" : 6, \"iban\" : \"iban\", \"customerId\" : 1, \"currency\" : \"currency\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /customers/{id}/accounts
     *
     * @param id Customer ID (required)
     * @return List of accounts by customer ID (status code 200)
     */
    @Operation(
        operationId = "getAccountsByCustomer",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "List of accounts by customer ID", content = {
                @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Account.class)))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/customers/{id}/accounts",
        produces = { "application/json" }
    )
    
    default ResponseEntity<List<Account>> getAccountsByCustomer(
        @Parameter(name = "id", description = "Customer ID", required = true, in = ParameterIn.PATH) @PathVariable("id") Integer id
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "[ { \"accountId\" : 0, \"balance\" : 6, \"iban\" : \"iban\", \"customerId\" : 1, \"currency\" : \"currency\" }, { \"accountId\" : 0, \"balance\" : 6, \"iban\" : \"iban\", \"customerId\" : 1, \"currency\" : \"currency\" } ]";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /accounts/{accountId}/notify
     *
     * @param accountId Account ID (required)
     * @param notifyBalanceChange Balance Change Notification (optional)
     * @return Successful notification (status code 200)
     */
    @Operation(
        operationId = "notifyBalanceChangeCallback",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Successful notification")
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/accounts/{accountId}/notify",
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Void> notifyBalanceChangeCallback(
        @Parameter(name = "accountId", description = "Account ID", required = true, in = ParameterIn.PATH) @PathVariable("accountId") Integer accountId,
        @Parameter(name = "NotifyBalanceChange", description = "Balance Change Notification") @Valid @RequestBody(required = false) NotifyBalanceChange notifyBalanceChange
    ) {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /accounts/{accountId}
     *
     * @param accountId Account ID (required)
     * @param account  (optional)
     * @return Account updated (status code 200)
     */
    @Operation(
        operationId = "updateAccount",
        tags = { "accounts" },
        responses = {
            @ApiResponse(responseCode = "200", description = "Account updated", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Account.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/accounts/{accountId}",
        produces = { "application/json" },
        consumes = { "application/json" }
    )
    
    default ResponseEntity<Account> updateAccount(
        @Parameter(name = "accountId", description = "Account ID", required = true, in = ParameterIn.PATH) @PathVariable("accountId") Integer accountId,
        @Parameter(name = "Account", description = "") @Valid @RequestBody(required = false) Account account
    ) {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/json"))) {
                    String exampleString = "{ \"accountId\" : 0, \"balance\" : 6, \"iban\" : \"iban\", \"customerId\" : 1, \"currency\" : \"currency\" }";
                    ApiUtil.setExampleResponse(request, "application/json", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
